# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã.
import logging
import json
import aiohttp
import requests
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ConversationHandler
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
import random
from glob import glob

full_count = 100
count_photo = []
hit = 0
# –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)

logger = logging.getLogger(__name__)

apikey = "24c8b16e-642c-44d0-a9fa-a895d26316cf"
right_answers = ['9,58 —Å–µ–∫—É–Ω–¥', '—É–≥–ª–µ—Ä–æ–¥', '–°—Ç—ç–Ω–ª–∏ –ö—É–±—Ä–∏–∫', '—Ä–∞–¥–æ–Ω', '–ö–æ–∫–∞-–∫–æ–ª–∞',
                 '–¶—é—Ä–∏—Ö', '–Æ—Ä–∏–π –ì–∞–≥–∞—Ä–∏–Ω', '–ê–∑–∏—è', '—Ö–∞–º–µ–ª–µ–æ–Ω', '–ò—Å–ø–∞–Ω–∏—è']
all_answers = []
count = 0


async def start2(update, context):
    reply_keyboard = [['/menu_random', '/top_secret'],
                      ['/economy', '/inventary']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–µ–ø–ª–æ—Ö–æ –ø—Ä–∏–ø–æ–¥–Ω—è—Ç—Å—è!\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é —É–¥–∞—á—É, –Ω–∞–∂–∞–≤ /play.\n"
        "–ú–æ–∂–Ω–æ –ø–æ—Å–ª–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /rules , –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞.\n"
        "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /stop\n"
        "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ /menu_random\n"
        "–ï—Å–ª–∏ –≤–∞–º —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, –∫–ª–∏–∫–∞–π—Ç–µ —Å—é–¥–∞ /help",
        reply_markup=markup)

    return 1


async def help(update, context):
    await update.message.reply_text(
        "–ó–¥–µ—Å—å –æ–ø–∏—Å–∞–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.\n"
        "/start - –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.\n"
        "/top_secret - —Å–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.\n"
        "/menu_random - –º–µ–Ω—é –¥–ª—è —É–≥–∞–¥–∞–π–∫–∏.\n"
        "/play(play_l2, play_l3) - –∑–∞–ø—É—Å–∫–∞–µ—Ç —É–≥–∞–¥–∞–π–∫—É\n"
        "/stop - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–≥—Ä—É.\n"
        "/questions - –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.\n"
        "/challenge - –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–≤–µ—Å—Ç.\n"
        "/send_it - –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∑–∞ 30 –º–æ–Ω–µ—Ç.\n"
        "/inventary - –≤–∞—à –∫–∞—Ä—Ç–æ—á–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.\n"
        "/weather - —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã.(—Å–Ω–∞—á–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–≤–æ–¥–∏—Ç—Å—è –º–µ—Å—Ç–æ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É,\n"
        "–ø–æ—Ç–æ–º –≤–≤–æ–¥—è—Ç—Å—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã:\n"
        "-temp - —É–±–∏—Ä–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã(¬∞C) –∏–∑ –æ—Ç–≤–µ—Ç–∞\n"
        "-reply - —É–±–∏—Ä–∞–µ—Ç –º–µ—Å—Ç–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–µ–π, –∏–∑ –æ—Ç–≤–µ—Ç–∞\n"
        "-reply_date - —É–±–∏—Ä–∞–µ—Ç –¥–∞—Ç—É –∏–∑ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
        "-condition - —É–±–∏—Ä–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Å–∞–¥–∫–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞\n"
        "-wind_dir - —É–±–∏—Ä–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞\n"
        "-wind_speed - —É–±–∏—Ä–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞(–º/—Å) –∏–∑ –æ—Ç–≤–µ—Ç–∞\n"
        "--extra - –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
        "(—Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ—Ä—ã–≤–æ–≤ –≤–µ—Ç—Ä–∞ (–º/—Å), –î–∞–≤–ª–µ–Ω–∏–µ (–º–º —Ä—Ç.—Å—Ç.), –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ (%)),\n"
        "–ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–≤–æ–¥–∏—Ç—Å—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã)")


async def top_secret(update, context):
    await update.message.reply_text("–û—Ç–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–æ–≤ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º —Ä—É–±–ª–∏–∫–æ–º:\n"
                                    "5536914016758595")


async def rules(update, context):
    await update.message.reply_text(
        "–ò—Ç–∞–∫, –¥–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω—á–µ–Ω–Ω—ã–π!")


async def economy(update, context):
    global full_count
    await update.message.reply_text(
        f"–í–∞—à —Å—É–º–º–∞—Ä–Ω—ã–π —Å—á–µ—Ç: {full_count}üí∏")

async def IDDQD(update, context):
    global full_count
    full_count = full_count + 1000
    await update.message.reply_text(
        f"–í–∞—à —Å—É–º–º–∞—Ä–Ω—ã–π —Å—á–µ—Ç: {full_count}üí∏")



async def menu_random(update, context):
    await update.message.reply_text(
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é —É–¥–∞—á—É, –Ω–∞–∂–∞–≤ /play.\n"
        "–ú–æ–∂–Ω–æ –ø–æ—Å–ª–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /rules , –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞.\n"
        "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /stop")

    return 1


async def first_level(update, context):
    global count
    global full_count
    user_input = update.message.text
    if user_input != context.user_data['number']:
        count += 1
    if count <= 7:
        if user_input.isdigit():
            answer_number = int(user_input)
            if answer_number > context.user_data['number']:
                await update.message.reply_text('–í–∞—à–µ —á–∏—Å–ª–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            elif answer_number < context.user_data['number']:
                await update.message.reply_text('–í–∞—à–µ —á–∏—Å–ª–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            else:
                full_count = full_count + 6
                await update.message.reply_text(
                    f'–í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º :) –ù–∞–ø–∏—à–∏—Ç–µ /play_l2, —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –Ω–∞ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ.\n')
                count = 0
                return ConversationHandler.END
        else:
            await update.message.reply_text('–í–æ–æ–±—â–µ –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –ø–∏—à–µ—Ç–µ')
    else:
        await update.message.reply_text('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑./play')
        count = 0
        return ConversationHandler.END


async def second_level(update, context):
    global count
    global full_count
    user_input = update.message.text
    if user_input != context.user_data['number']:
        count += 1
    if count <= 10:
        if user_input.isdigit():
            answer_number = int(user_input)
            if answer_number > context.user_data['number']:
                await update.message.reply_text('–í–∞—à–µ —á–∏—Å–ª–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            elif answer_number < context.user_data['number']:
                await update.message.reply_text('–í–∞—à–µ —á–∏—Å–ª–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            else:
                full_count = full_count + 6
                await update.message.reply_text(
                    f'–í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º :) –ù–∞–ø–∏—à–∏—Ç–µ /play_l3, —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –Ω–∞ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ.\n')
                count = 0
                return ConversationHandler.END
        else:
            await update.message.reply_text('–í–æ–æ–±—â–µ –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –ø–∏—à–µ—Ç–µ')
    else:
        await update.message.reply_text('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. /play')
        count = 0
        return ConversationHandler.END


async def third_level(update, context):
    global count
    global full_count
    user_input = update.message.text
    if user_input != context.user_data['number']:
        count += 1
    if count <= 10:
        if user_input.isdigit():
            answer_number = int(user_input)
            if answer_number > context.user_data['number']:
                await update.message.reply_text('–í–∞—à–µ —á–∏—Å–ª–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            elif answer_number < context.user_data['number']:
                await update.message.reply_text('–í–∞—à–µ —á–∏—Å–ª–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            else:
                full_count = full_count + 9
                await update.message.reply_text(
                    '–í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º :) –ù–∞–ø–∏—à–∏—Ç–µ /play, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ)')
                count = 0
                return ConversationHandler.END
        else:
            await update.message.reply_text('–í–æ–æ–±—â–µ –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –ø–∏—à–µ—Ç–µ')
    else:
        await update.message.reply_text('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. /play')
        count = 0
        return ConversationHandler.END


async def stop(update, context):
    await update.message.reply_text("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!")
    return ConversationHandler.END


async def play(update, context):
    number = random.randint(1, 50)
    context.user_data['number'] = number
    await update.message.reply_text(
        f"—è –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50, –æ—Ç–≥–∞–¥–∞–π")

    return 1


async def play_l2(update, context):
    number = random.randint(1, 100)
    context.user_data['number'] = number
    await update.message.reply_text(
        f"—è –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100, –æ—Ç–≥–∞–¥–∞–π")
    return 2


async def play_l3(update, context):
    number = random.randint(1, 250)
    context.user_data['number'] = number
    await update.message.reply_text(
        f"—è –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 250, –æ—Ç–≥–∞–¥–∞–π")

    return 3


async def questions(update, context):
    global full_count
    global all_answers, right_answers
    reply_keyboard = [['9,58 —Å–µ–∫—É–Ω–¥', '9,68 —Å–µ–∫—É–Ω–¥'],
                      ['9,78 —Å–µ–∫—É–Ω–¥', '9,88 —Å–µ–∫—É–Ω–¥']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç. –ü—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –æ–ø—Ä–æ—Å, –ø–æ—Å–ª–∞–≤ –∫–æ–º–∞–Ω–¥—É /stop.\n"
        "–ö–∞–∫–æ–π —Ä–µ–∫–æ—Ä–¥ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –£—Å—ç–π–Ω –ë–æ–ª—Ç –Ω–∞ –û–ª–∏–º–ø–∏–π—Å–∫–∏—Ö –∏–≥—Ä–∞—Ö 2008 –≥–æ–¥–∞ –≤ –ü–µ–∫–∏–Ω–µ –≤ –±–µ–≥–µ –Ω–∞ 100 –º–µ—Ç—Ä–æ–≤?",
        reply_markup=markup)

    return 1


async def send_it(bot, update):
    global count_photo
    global hit
    global full_count
    hit = hit + 1
    lists = glob('images/*')
    picture = lists[0]
    if len(count_photo) == 3:
        await bot.message.reply_text(
            f"—É —Ç–µ–±—è –µ—Å—Ç—å –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
    elif picture not in count_photo:
        if full_count >= 30:
            await update.bot.send_photo(chat_id=bot.message.chat.id, photo=open(picture, 'rb'))
            count_photo.append(picture)
            full_count = full_count - 30
        else:
            await bot.message.reply_text(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")

    elif picture in count_photo:
        for u in range(3):
            picture = lists[u]
            if picture not in count_photo:
                if full_count >= 30:
                    await update.bot.send_photo(chat_id=bot.message.chat.id, photo=open(picture, 'rb'))
                    count_photo.append(picture)
                    full_count = full_count - 30
                    break
                else:
                    await bot.message.reply_text(
                        f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")


async def inventary(bot, update):
    for picture in count_photo:
        await update.bot.send_photo(chat_id=bot.message.chat.id, photo=open(picture, 'rb'))


# 1
async def first_response(update, context):
    global all_answers, right_answers
    reply_keyboard = [['—É–≥–ª–µ—Ä–æ–¥', '–∂–µ–ª–µ–∑–æ'],
                      ['–≥–µ–ª–∏–π', '–∫–∏—Å–ª–æ—Ä–æ–¥']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    all_answers.append(update.message.text)
    await update.message.reply_text(
        f"–ö–∞–∫–æ–π —Ö–∏–º–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ—Ç–æ–ø–æ–≤?", reply_markup=markup)
    return 2


# 2
async def second_response(update, context):
    global all_answers, right_answers
    reply_keyboard = [['–°—Ç—ç–Ω–ª–∏ –ö—É–±—Ä–∏–∫', '–†–æ–± –†–∞–π–Ω–µ—Ä'],
                      ['–§—Ä—ç–Ω–∫ –î–∞—Ä–∞–±–æ–Ω—Ç', '–ë—Ä–∞–π–∞–Ω –î–µ –ü–∞–ª—å–º–∞']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    all_answers.append(update.message.text)
    await update.message.reply_text(
        f"–ö–∞–∫–æ–π –∏–∑ —ç—Ç–∏—Ö —Ä–µ–∂–∏—Å—Å–µ—Ä–æ–≤ –Ω–µ —Å–Ω–∏–º–∞–ª —Ñ–∏–ª—å–º—ã –ø–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è–º –°—Ç–∏–≤–µ–Ω–∞ –ö–∏–Ω–≥–∞?", reply_markup=markup)
    return 3


# 3
async def third_response(update, context):
    global all_answers, right_answers
    reply_keyboard = [['–∫–∏—Å–ª–æ—Ä–æ–¥', '—Ä–∞–¥–æ–Ω'],
                      ['—É–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑', '–≤–æ–¥–æ—Ä–æ–¥']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    all_answers.append(update.message.text)
    await update.message.reply_text(
        f"–ö–∞–∫–æ–π –≥–∞–∑ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –ó–µ–º–ª–∏?", reply_markup=markup)
    return 4


# 4
async def fourth_response(update, context):
    global all_answers, right_answers
    reply_keyboard = [['–ü–µ–ø—Å–∏', '–§–∞–Ω—Ç–∞'],
                      ['–ö–æ–∫–∞-–∫–æ–ª–∞', '–°–Ω–∞–ø–ª']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    all_answers.append(update.message.text)
    await update.message.reply_text(
        f"–ö–∞–∫–æ–π –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –ø–µ—Ä–≤—ã–º –±—ã–ª –≤–∑—è—Ç –≤ –∫–æ—Å–º–æ—Å?", reply_markup=markup)
    return 5


# 5
async def fifth_response(update, context):
    global all_answers, right_answers
    reply_keyboard = [['–¶—é—Ä–∏—Ö', '–í–µ–Ω–∞'],
                      ['–ö–æ–ø–µ–Ω–≥–∞–≥–µ–Ω', '–û—Å–ª–æ']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    all_answers.append(update.message.text)
    await update.message.reply_text(
        f"–ö–∞–∫–æ–π –∏–∑ —ç—Ç–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–π —Å—Ç—Ä–∞–Ω—ã?", reply_markup=markup)
    return 6


# 6
async def sixth_response(update, context):
    global all_answers, right_answers
    reply_keyboard = [['–Æ—Ä–∏–π –ì–∞–≥–∞—Ä–∏–Ω', '–ê–ª–µ–∫—Å–µ–π –õ–µ–æ–Ω–æ–≤'],
                      ['–ù–∏–ª –ê—Ä–º—Å—Ç—Ä–æ–Ω–≥', '–ë–∞–∑–∑ –û–ª–¥—Ä–∏–Ω']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    all_answers.append(update.message.text)
    await update.message.reply_text(
        f"–ö—Ç–æ –±—ã–ª –ø–µ—Ä–≤—ã–º –∫–æ—Å–º–æ–Ω–∞–≤—Ç–æ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏?", reply_markup=markup)
    return 7


# 7
async def seventh_response(update, context):
    global all_answers, right_answers
    reply_keyboard = [['–ê—Ñ—Ä–∏–∫–∞', '–ï–≤—Ä–æ–ø–∞'],
                      ['–ê–∑–∏—è', '–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    all_answers.append(update.message.text)
    await update.message.reply_text(
        f"–ö–∞–∫–æ–π –º–∞—Ç–µ—Ä–∏–∫ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º—ã–º –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–º?", reply_markup=markup)
    return 8


# 8
async def eighth_response(update, context):
    global all_answers, right_answers
    reply_keyboard = [['–≥–µ–ø–∞—Ä–¥', '—Ö–∞–º–µ–ª–µ–æ–Ω'],
                      ['–≥–æ—Ä–∏–ª–ª–∞', '—Ç–∏–≥—Ä']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    all_answers.append(update.message.text)
    await update.message.reply_text(
        f"–ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Ü–≤–µ—Ç —Å–≤–æ–µ–π –∫–æ–∂–∏ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –æ—Ç –≤—Ä–∞–≥–æ–≤?", reply_markup=markup)
    return 9


# 9
async def ninth_response(update, context):
    global all_answers, right_answers
    reply_keyboard = [['–ò—Å–ø–∞–Ω–∏—è', '–ò—Ç–∞–ª–∏—è'],
                      ['–§—Ä–∞–Ω—Ü–∏—è', '–ì–µ—Ä–º–∞–Ω–∏—è']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    all_answers.append(update.message.text)
    await update.message.reply_text(
        f"–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è —Ä–æ–¥–∏–Ω–æ–π —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ –∫–ª—É–±–∞ '–ë–∞—Ä—Å–µ–ª–æ–Ω–∞'?", reply_markup=markup)
    return 10


# 10
async def tenth_response(update, context):
    global full_count
    global all_answers, right_answers
    all_answers.append(update.message.text)
    n = 0
    for i in range(len(right_answers)):
        if all_answers[i] == right_answers[i]:
            n += 1
    await update.message.reply_text(
        f'–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Ç–µ—Å—Ç –Ω–∞ {n / len(right_answers) * 100}%\n'
        f'–≤–∞—à —Å—É–º–º–∞—Ä–Ω—ã–π —Å—á–µ—Ç: {full_count + (n * 3)}', reply_markup=ReplyKeyboardRemove())
    all_answers = []
    return ConversationHandler.END


async def stop(update, context):
    global all_answers, right_answers
    await update.message.reply_text("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!", reply_markup=ReplyKeyboardRemove())
    all_answers = []
    return ConversationHandler.END


async def challenge(update, context):
    reply_keyboard = [['1', '2', '3']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤—Ç—å –≤ –∫–≤–µ—Å—Ç!\n"
        "–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –Ω–µ–±–æ–ª—å—à–æ–µ —Ç–µ–∫—Å—Ç–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ, –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –≤—ã–±–æ—Ä –¥–≤–µ—Ä–µ–π\n"
        "–¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∏–∑ –Ω–∏—Ö –≤–µ–¥–µ—Ç –Ω–∞ —Å–≤–æ–±–æ–¥—É, –ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö –≤–∞—Å –∂–¥–µ—Ç —Å–º–µ—Ä—Ç—å\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç, –ø–æ—Å–ª–∞–≤ –∫–æ–º–∞–Ω–¥—É /stop.\n"
        "–í—ã –ø—Ä–æ—Å—ã–ø–∞–µ—Ç–µ—Å—å –≤ –∑–∞–±—Ä–æ—à–µ–Ω–Ω–æ–π —Ç–µ–º–º–Ω–∏—Ü–µ. –ó–¥–µ—Å—å —Å—ã—Ä–æ–≤–∞—Ç–æ\n"
        "–ù–∞ –ø–æ–ª—É –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ –∫–ª—é—á –∏ –≤—ã–±–∏—Ä–∞–µ—Ç–µ—Å—å –∏–∑ —Ç–µ–º–Ω–∏—Ü—ã\n"
        "–ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ç—Ä–∏ –¥–≤–µ—Ä–∏. –ó–∞ –ø–µ—Ä–≤–æ–π –¥–≤—Ä—å—é –≤—ã —Å–ª—ã—à–∏—Ç–µ –¥–µ—Ç—Å–∫–∏–π –ø–ª–∞—á.\n"
        "–ó–∞ –≤—Ç–æ—Ä–æ–π –¥–≤–µ—Ä—å—é —Å–ª—ã—à–µ –∑–≤–æ–Ω –º–æ–Ω–µ—Ç, –∞ –∑–∞ —Ç—Ä–µ—Ç—å–µ–π –≤—ã —Å–ª—ã—à–∏—Ç–µ –ª–∏—à—å –ø—É—Å—Ç–æ—Ç—É\n"
        "–ö—É–¥–∞ –ø–æ–π–¥–µ–º?",
        reply_markup=markup)

    return 1


async def chal_1(update, context):
    if update.message.text == "1":
        reply_keyboard = [['1', '2', '3']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        await update.message.reply_text(
            "–î–µ—Ç—Å–∫–∏–π –ø–ª–∞—á –æ–∫–∞–∑–∞–ª—Å—è –º–µ–ª–∫–∏–º —Ä—É—á–µ–π–∫–æ–º. –ù–∞–ø–∏–≤—à–∏—Å—å –≤–¥–≤–æ–ª—å, –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∏ –ø—É—Ç—å\n"
            "–ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Å–Ω–æ–≤–∞ —Ç—Ä–∏ –¥–≤–µ—Ä–∏\n"
            "–í —â–µ–ª—å –ø–µ—Ä–≤–æ–π –¥–≤–µ—Ä–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —è—Ä–∫–∏–π —Å–≤–µ—Ç. –ó–∞ –≤—Ç–æ—Ä–æ–π –¥–≤–µ—Ä—å —Å–ª—ã—à–∞—Ç—Å—è –∑–≤—É–∫–∏ –ø–∞–Ω–∫-–º—É–∑—ã–∫–∏\n"
            "–ó–∞ —Ç—Ä–µ—Ç—å–µ–π –≤—ã —Å–ª—ã—à–∏—Ç–µ –≤–µ—Ç–µ—Ä. –ö—É–¥–∞ –ø–æ–π–¥–µ–º?",
            reply_markup=markup)
        return 2
    elif update.message.text == "2":
        await stop1(update, context, t=1)
        return ConversationHandler.END
    elif update.message.text == "3":
        await stop1(update, context, t=2)
        return ConversationHandler.END
    else:
        reply_keyboard = [['1', '2', '3']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        await update.message.reply_text(
            "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ö–∞–∫—É—é –¥–≤–µ—Ä—å –≤—ã –≤—ã–±—Ä–∞–ª–∏? –ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=markup)
        return 1


async def chal_2(update, context):
    if update.message.text == "1":
        reply_keyboard = [['1', '2', '3']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        await update.message.reply_text(
            "–ó–∞ –ø–µ—Ä–≤–æ–π –¥–≤–µ—Ä—å—é —Å–∫—Ä—ã–≤–∞–ª—Å—è —Å–∞–º—ã–π –º–æ—â–Ω—ã–∂ –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä –≠–ª—å–±—Ä—É—Å 512.172000.1200\n"
            "–ù–∞–π–¥—è –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É, –≤—ã –≤—ã–∫–ª—é—á–∞–µ—Ç–µ –µ–≥–æ. –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Å–Ω–æ–≤–∞ —Ç—Ä–∏ –¥–≤–µ—Ä–∏\n"
            "–ó–∞ –ø–µ—Ä–≤–æ–π –¥–≤–µ—Ä—å—é –≤—ã —Å–ª—ã—à–∏—Ç–µ –∑–≤—É–∫–∏ –≤–æ–ª–Ω. –ó–∞ –≤—Ç–æ—Ä–æ–π –¥–≤–µ—Ä—å—é - –ø–µ–Ω–∏–µ –ø—Ç–∏—Ü\n"
            "–ê –∑–∞ —Ç—Ä–µ—Ç—å–µ–π - —Å—Ç—Ä–µ–ª—å–±–∞. –ö—É–¥–∞ –ø–æ–π–¥–µ–º?",
            reply_markup=markup)
        return 3
    elif update.message.text == "2":
        await stop1(update, context, t=3)
        return ConversationHandler.END
    elif update.message.text == "3":
        await stop1(update, context, t=4)
        return ConversationHandler.END
    else:
        reply_keyboard = [['1', '2', '3']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        await update.message.reply_text(
            "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ö–∞–∫—É—é –¥–≤–µ—Ä—å –≤—ã –≤—ã–±—Ä–∞–ª–∏? –ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=markup)
        return 2


async def chal_3(update, context):
    if update.message.text == "3":
        await update.message.reply_text(
            "–í—ã –æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–∞ –ø—Ä–µ–º—å–µ—Ä–µ –Ω–æ–≤–æ–≥–æ –±–æ–µ–≤–∏–∫–∞. –û–Ω –±—ã–ª –Ω–∞ —Å—Ç–æ–ª—å–∫–æ —Å–∫—É—á–Ω—ã–º, —á—Ç–æ –≤—ã –∑–∞—Å–Ω—É–ª–∏\n"
            "–≠—Ç–æ –±—ã–ª –≤—Å–µ–≥–æ –ª–∏—à—å —Å–æ–Ω. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å –∫–≤–µ—Å—Ç–æ–º\n",
            reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    elif update.message.text == "1":
        await stop1(update, context, t=5)
        return ConversationHandler.END
    elif update.message.text == "2":
        await stop1(update, context, t=6)
        return ConversationHandler.END
    else:
        reply_keyboard = [['1', '2', '3']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        await update.message.reply_text(
            "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ö–∞–∫—É—é –¥–≤–µ—Ä—å –≤—ã –≤—ã–±—Ä–∞–ª–∏? –ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=markup)
        return 3


async def stop1(update, context, t=0):
    if t == 0:
        await update.message.reply_text(
            "–í—ã —Å–º–∏—Ä–∏–ª–∏—Å—å —Å –±–µ–∑—ã—Å—Ö–æ–¥–Ω–æ—Å—Ç—å—é, –ø—Ä–∏—Å–µ–ª–∏ —É  —Å—Ç–µ–Ω—ã –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –∏ —É—Å–Ω—É–ª–∏ –Ω–∞ –≤–µ–∫–∏ –≤–µ—á–Ω—ã–µ. –£–≤—ã, –≤—ã —É–º–µ—Ä–ª–∏\n"
            "(–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ /challenge)")
    if t == 1:
        await update.message.reply_text(
            "–ó–≤—É–∫ –º–æ–Ω–µ—Ç –æ–∫–∞–∑–∞–ª—Å—è –∑–≤–æ–Ω–æ–º –∫–∞–ø–∞—é—â–µ–π –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–π –∂–∏–∫–æ—Å—Ç–∏. –î–æ—Ç—Ä–æ–Ω—É–≤—à–∏—Å—å –¥–æ –Ω–µ–µ –≤—ã –∏—Å–ø–∞—Ä–∏–ª–∏—Å—å. –£–≤—ã, –≤—ã —É–º–µ—Ä–ª–∏\n"
            "(–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ /challenge)")
    if t == 2:
        await update.message.reply_text(
            "–°–¥–µ–ª–∞–≤ —à–∞–≥ –≤—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å –≤ —è–º—É –∏ —Ä–∞–∑–±–∏–ª–∏—Å—å –æ–± –ø–∏–∫–∏. –£–≤—ã, –≤—ã —É–º–µ—Ä–ª–∏\n"
            "(–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ /challenge)")
    if t == 3:
        await update.message.reply_text(
            "–í –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ –∫—Ä–∏–∫–Ω—É–ª–∏ '–ü–∞–Ω–∫–∏ —Ö–æ–π!', –≤–∞—Å –∑–∞–¥–∞–≤–∏–ª–∞ —Ç–æ–ª–ø–∞. –£–≤—ã, –≤—ã —É–º–µ—Ä–ª–∏\n"
            "(–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ /challenge)")
    if t == 4:
        await update.message.reply_text(
            "–í—ã –ø–æ–ø–∞–ª–∏ –≤ –≤–Ω–µ–Ω—Ç–∏–ª—è—Ü–∏—é, –≤–µ—Ç–µ—Ä –≤–∞—Å –ø–æ–Ω–µ—Å –ø—Ä—è–º–æ –Ω–∞ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä, –≥–¥–µ –≤–∞—Å —Ä–∞—Å–∫—Ä–æ–º—Å–∞–ª–æ –Ω–∞ –∫—É—Å–æ—á–∫–∏. –£–≤—ã, "
            "–≤—ã —É–º–µ—Ä–ª–∏\n"
            "(–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ /challenge)")
    if t == 5:
        await update.message.reply_text(
            "–í—ã –Ω–∞ –ø–ª—è–∂ –≤ —Å–∞–º—ã–π —Ä–∞–∑–≥–∞—Ä —Ü—É–Ω–∞–º–∏. –í–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Å—Ç–∏—Å—å. –£–≤—ã, –≤—ã —É–º–µ—Ä–ª–∏\n"
            "(–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ /challenge)")
    if t == 6:
        await update.message.reply_text(
            "–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –æ—Ç–≤–µ—Å–Ω—ã–π —É—Å—Ç—É–ø —Å–∫–∞–ª—ã. –ù–µ –Ω–∞–π–¥—è –¥—Ä—É–≥–æ–≥ –≤—ã—Ö–æ–¥–∞, –≤—ã –ø—Ä—ã–≥–Ω—É–ª–∏ –∏ —Ä–∞–∑–±–∏–ª–∏—Å—å. –£–≤—ã, –≤—ã —É–º–µ—Ä–ª–∏\n"
            "(–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ /challenge)")
    return ConversationHandler.END


async def get_response(url, params):
    logger.info(f"getting {url}")
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as resp:
            return await resp.json()


async def weather(update, context):
    global full_count
    full_count -= 6

    def yandex_weather(data):
        location = " ".join(data).split()
        if '--extra' in location:
            location.remove('--extra')
        if '-reply' in location:
            location.remove('-reply')
        if '-temp' in location:
            location.remove('-temp')
        if '-feels_like' in location:
            location.remove('-feels_like')
        if '-condition' in location:
            location.remove('-condition')
        if '-wind_dir' in location:
            location.remove('-wind_dir')
        if '-wind_speed' in location:
            location.remove('-wind_speed')
        if 'date:' in location:
            location.remove('date:')
            if data.index(data[data.index('date:')]) + 1 != len(data):
                location.remove(data[data.index('date:') + 1])
            else:
                return "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É"
        location = ' '.join(location)
        coords = toponym(location).split()
        conditions = {'clear': '—è—Å–Ω–æ ‚òÄ', 'partly-cloudy': '–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ üå§', 'cloudy': '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ ‚õÖ',
                      'overcast': '–ø–∞—Å–º—É—Ä–Ω–æ ‚òÅ', 'drizzle': '–º–æ—Ä–æ—Å—å üåß', 'light-rain': '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üåß',
                      'rain': '–¥–æ–∂–¥—å üåß', 'moderate-rain': '—É–º–µ—Ä–µ–Ω–Ω–æ —Å–∏–ª—å–Ω—ã–π üåß', 'heavy-rain': '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåß',
                      'continuous-heavy-rain': '–¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåß', 'showers': '–ª–∏–≤–µ–Ω—å üåß',
                      'wet-snow': '–¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º üå®', 'light-snow': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ üå®', 'snow': '—Å–Ω–µ–≥ üå®',
                      'snow-showers': '—Å–Ω–µ–≥–æ–ø–∞–¥ üå®', 'hail': '–≥—Ä–∞–¥ üå®', 'thunderstorm': '–≥—Ä–æ–∑–∞ üå©',
                      'thunderstorm-with-rain': '–¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π ‚õà', 'thunderstorm-with-hail': '–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º ‚õà'
                      }
        wind_dir = {'nw': '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω–æ–µ', 'n': '—Å–µ–≤–µ—Ä–Ω–æ–µ', 'ne': '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ', 'e': '–≤–æ—Å—Ç–æ—á–Ω–æ–µ',
                    'se': '—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ', 's': '—é–∂–Ω–æ–µ', 'sw': '—é–≥–æ-–∑–∞–ø–∞–¥–Ω–æ–µ', 'w': '–∑–∞–ø–∞–¥–Ω–æ–µ', '—Å': '—à—Ç–∏–ª—å'}
        params = {"lat": coords[1],
                  "lon": coords[0],
                  "lang": "ru_RU",
                  "extra": "true"}
        headers = {"X-Yandex-API-Key": "00e5b9a8-2f6b-4583-9953-3e5c2ff2d16c"}
        res = requests.get('https://api.weather.yandex.ru/v2/forecast', params=params, headers=headers).json()

        weather = ''
        if '-reply' not in data:
            weather += f"–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –ø–æ –∞–¥—Ä–µ—Å—É: {location}"
        if '-temp' not in data:
            weather += f"\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {res['fact']['temp']}¬∞C"
        if '-feels_like' not in data:
            weather += f"\n–û—â—É—â–∞–µ—Ç—Å—è, –∫–∞–∫: {res['fact']['feels_like']}¬∞C"
        if '-condition' not in data:
            weather += f"\n–û—Å–∞–¥–∫–∏: {conditions[res['fact']['condition']]}"
        if '-wind_dir' not in data:
            weather += f"\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {wind_dir[res['fact']['wind_dir']]}"
        if '-wind_speed' not in data:
            weather += f"\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {res['fact']['wind_speed']} –º/—Å"
        if "--extra" in data:
            weather += f"\n–°–∫–æ—Ä–æ—Å—Ç—å –ø–æ—Ä—ã–≤–æ–≤ –≤–µ—Ç—Ä–∞: {res['fact']['wind_gust']} –º/—Å\n–î–∞–≤–ª–µ–Ω–∏–µ : {res['fact']['pressure_mm']}  –º–º —Ä—Ç. —Å—Ç.\n–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {res['fact']['humidity']} %"
        weather = weather.lstrip("\n")
        forecasts_date = [res['forecasts'][0]['date'], res['forecasts'][1]['date'], res['forecasts'][2]['date'],
                          res['forecasts'][3]['date'], res['forecasts'][4]['date'], res['forecasts'][5]['date'],
                          res['forecasts'][6]['date']]
        if 'date:' in data:
            if data[data.index('date:') + 1] in forecasts_date:
                index = forecasts_date.index(data[data.index('date:') + 1])
                forecast = ''
                if '-reply' not in data:
                    forecast += f"–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –ø–æ –∞–¥—Ä–µ—Å—É: {location}"
                if '-reply_date' not in data:
                    forecast += f"\n–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –Ω–∞ –¥–∞—Ç—É: {data[data.index('date:') + 1]}"
                if '-temp' not in data:
                    forecast += f"\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {res['forecasts'][index]['parts']['day_short']['temp']}¬∞C"
                if '-feels_like' not in data:
                    forecast += f"\n–û—â—É—â–∞–µ—Ç—Å—è, –∫–∞–∫: {res['forecasts'][index]['parts']['day_short']['feels_like']}¬∞C"
                if '-condition' not in data:
                    forecast += f"\n–û—Å–∞–¥–∫–∏: {conditions[res['forecasts'][index]['parts']['day_short']['condition']]}"
                if '-wind_dir' not in data:
                    forecast += f"\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {wind_dir[res['forecasts'][index]['parts']['day_short']['wind_dir']]}"
                if '-wind_speed' not in data:
                    forecast += f"\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {res['forecasts'][index]['parts']['day_short']['wind_speed']} –º/—Å"
                if "--extra" in data:
                    forecast += f"\n–°–∫–æ—Ä–æ—Å—Ç—å –ø–æ—Ä—ã–≤–æ–≤ –≤–µ—Ç—Ä–∞: {res['forecasts'][index]['parts']['day_short']['wind_gust']} –º/—Å\n–î–∞–≤–ª–µ–Ω–∏–µ : {res['forecasts'][index]['parts']['day_short']['pressure_mm']}  –º–º —Ä—Ç. —Å—Ç.\n–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {res['forecasts'][index]['parts']['day_short']['humidity']} %"
                forecast = forecast.lstrip("\n")
                return forecast
            else:
                return '–≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É'
        return weather

    def toponym(text):
        geocoder_request = f"http://geocode-maps.yandex.ru/1.x/?apikey=40d1649f-0493-4b70-98ba-98533de7710b&geocode={text}&format=json"

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å.
        response = requests.get(geocoder_request)
        if response:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ json-–æ–±—ä–µ–∫—Ç
            json_response = response.json()

            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–ø–æ–Ω–∏–º –∏–∑ –æ—Ç–≤–µ—Ç–∞ –≥–µ–æ–∫–æ–¥–µ—Ä–∞.
            # –°–æ–≥–ª–∞—Å–Ω–æ –æ–ø–∏—Å–∞–Ω–∏—é –æ—Ç–≤–µ—Ç–∞, –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É—Ç–∏:
            toponym = json_response["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ —Ç–æ–ø–æ–Ω–∏–º–∞:
            toponym_coodrinates = toponym["Point"]["pos"]
            # –ü–µ—á–∞—Ç–∞–µ–º –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—è:
            return toponym_coodrinates

    if context.args:
        if full_count >= 6:
            await update.message.reply_text(yandex_weather(context.args))
        else:
            await update.message.reply_text('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤)')
    else:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–≥–æ–¥—ã')


def main():
    application = Application.builder().token('5999252740:AAENPLeEI4GGgo_0H4QTWZiuCzqn2KWVtQU').build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('questions', questions)],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, first_response)],
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, second_response)],
            3: [MessageHandler(filters.TEXT & ~filters.COMMAND, third_response)],
            4: [MessageHandler(filters.TEXT & ~filters.COMMAND, fourth_response)],
            5: [MessageHandler(filters.TEXT & ~filters.COMMAND, fifth_response)],
            6: [MessageHandler(filters.TEXT & ~filters.COMMAND, sixth_response)],
            7: [MessageHandler(filters.TEXT & ~filters.COMMAND, seventh_response)],
            8: [MessageHandler(filters.TEXT & ~filters.COMMAND, eighth_response)],
            9: [MessageHandler(filters.TEXT & ~filters.COMMAND, ninth_response)],
            10: [MessageHandler(filters.TEXT & ~filters.COMMAND, tenth_response)]
        },

        fallbacks=[CommandHandler('stop', stop)]
    )
    conv_handler1 = ConversationHandler(
        # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥.
        # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /start. –û–Ω–∞ –∑–∞–¥–∞—ë—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å.
        entry_points=[CommandHandler('challenge', challenge)],

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ª–æ–≥–∞.
        # –í–∞—Ä–∏–∞–Ω—Ç —Å –¥–≤—É–º—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏, —Ñ–∏–ª—å—Ç—Ä—É—é—â–∏–º–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
        states={
            # –§—É–Ω–∫—Ü–∏—è —á–∏—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–¥–∞—ë—Ç –≤—Ç–æ—Ä–æ–π.
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, chal_1)],
            # –§—É–Ω–∫—Ü–∏—è —á–∏—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥.
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, chal_2)],
            3: [MessageHandler(filters.TEXT & ~filters.COMMAND, chal_3)]

        },

        # –¢–æ—á–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /stop.
        fallbacks=[CommandHandler('stop', stop1), CommandHandler('challenge', challenge)]
    )
    conv_handler2 = ConversationHandler(
        entry_points=[CommandHandler('start', start2), CommandHandler('play', play), CommandHandler('play_l2', play_l2),
                      CommandHandler('play_l3', play_l3), CommandHandler('economy', economy),
                      CommandHandler('menu_random', menu_random)],

        states={

            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, first_level)],

            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, second_level)],

            3: [MessageHandler(filters.TEXT & ~filters.COMMAND, third_level)]
        },

        fallbacks=[CommandHandler('stop', stop), CommandHandler('menu_random', menu_random),
                   CommandHandler('play', play), CommandHandler('play_l2', play_l2), CommandHandler('play_l3', play_l3),
                   CommandHandler('rules', rules), CommandHandler('help', help),
                   CommandHandler('top_secret', top_secret), CommandHandler('economy', economy)]
    )

    application.add_handler(conv_handler2)

    application.add_handler(conv_handler)

    application.add_handler(conv_handler1)
    application.add_handler(CommandHandler('IDDQD', IDDQD))
    application.add_handler(CommandHandler('questions', questions))
    application.add_handler(CommandHandler('inventary', inventary))
    application.add_handler(CommandHandler('weather', weather))
    application.add_handler(CommandHandler('send_it', send_it))

    application.run_polling()


if __name__ == '__main__':
    main()
